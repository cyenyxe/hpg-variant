import hashlib, os, shutil, sys

Import('env') # exported by parent SConstruct

# Here's the core info for the DEBIAN/control file of the package
DEBNAME = "hpg-variant"
DEBVERSION = "0.99.4"
DEBMAINT = "Cristina Yenyxe Gonzalez Garcia <cgonzalez@cipf.es>"
DEBARCH = "amd64"
DEBDEPENDS = "libc6, libcurl4-openssl-dev, libgsl0ldbl, libxml2, zlib1g"
DEBSECTION = "science"
DEBDESC = ''.join([ "Bioinformatics tool suite for analyzing genomic variations\n", 
" HPG Variant is a suite for the analysis of genomic data extracted from Next\n",
" Generation Sequencing technologies. It uses parallel computing technologies\n",
" such as CUDA and OpenMP in order to reduce the processing times.\n",
" It contains three binaries:\n",
"  * hpg-var-effect retrieves the effect of genome variations.\n",
"  * hpg-var-gwas conducts genomic-wide association analysis such as chi-square\n",
"    and Fisher's exact test, and family-based analysis such as transmission\n",
"    disequilibrium test (TDT).\n",
"  * hpg-var-vcf allows one to preprocess files containing genome variations in\n",
"    Variant Call Format." ])

DEBFILES = [
    # Now we specify the files to be included in the .deb
    # Where they should go, and where they should be copied from.
    # If you have a lot of files, you may wish to generate this 
    # list in some other way.
    ("usr/bin/hpg-var-effect",                  "#bin/hpg-var-effect"),
    ("usr/bin/hpg-var-gwas",                    "#bin/hpg-var-gwas"),
    ("usr/bin/hpg-var-vcf",                     "#bin/hpg-var-vcf"),
    
    ("etc/hpg-variant/hpg-variant.conf",        "#etc/hpg-variant/hpg-variant.conf"),
    ("etc/hpg-variant/vcf-info-fields.conf",    "#etc/hpg-variant/vcf-info-fields.conf"),

    ("etc/bash_completion.d/hpg-var-effect",    "#etc/bash_completion.d/hpg-var-effect"),
    ("etc/bash_completion.d/hpg-var-gwas",      "#etc/bash_completion.d/hpg-var-gwas"),
    ("etc/bash_completion.d/hpg-var-vcf",       "#etc/bash_completion.d/hpg-var-vcf"),
]

CONFFILES = [
    "/etc/hpg-variant/hpg-variant.conf",
    "/etc/hpg-variant/vcf-info-fields.conf"
]

COMPLETFILES = [
    "etc/bash_completion.d/hpg-var-effect",
    "etc/bash_completion.d/hpg-var-gwas",
    "etc/bash_completion.d/hpg-var-vcf"
]


# This is the debian package we're going to create
#debpkg = '#%s_%s-%s_%s.deb' % (DEBNAME, DEBVERSION, svn_version, DEBARCH)
debpkg = '#%s_%s-%s.deb' % (DEBNAME, DEBVERSION, DEBARCH)

# and we want it to be built when we build 'debian'
env.Alias("debian", debpkg)

DEBCONFFILE = os.path.join(DEBNAME, "DEBIAN/conffiles")
DEBCOMPLETFILE = os.path.join(DEBNAME, "DEBIAN/package.bash-completion")
DEBCONTROLFILE = os.path.join(DEBNAME, "DEBIAN/control")
DEBMD5FILE = os.path.join(DEBNAME, "DEBIAN/md5sums")

# This copies the necessary files into place into place.
# Fortunately, SCons creates the necessary directories for us.
for f in DEBFILES:
    # We put things in a directory named after the package
    dest = os.path.join(DEBNAME, f[0])
    # The .deb package will depend on this file
    env.Depends(debpkg, dest)
    # Copy from the the source tree.
    env.Command(dest, f[1], Copy('$TARGET','$SOURCE'))
    # The control and MD5 files also depend on each source because we'd like
    # to know the total installed size of the package
    env.Depends(DEBCONTROLFILE, dest)
    env.Depends(DEBCOMPLETFILE, dest)
    env.Depends(DEBMD5FILE, dest)

# Now to create the control file:
CONTROL_TEMPLATE = """
Package: %s
Priority: optional
Section: %s
Installed-Size: %s
Maintainer: %s
Architecture: %s
Version: %s
Depends: %s
Description: %s
"""

env.Depends(debpkg, DEBCONFFILE)
env.Depends(debpkg, DEBCONTROLFILE)
env.Depends(debpkg, DEBMD5FILE)

# This function creates the conffiles file.
def make_conffiles(target=None, source=None, env=None):
    conffile = ''
    for i in CONFFILES:
        conffile += i + '\n'
    with open(str(target[0]), 'w') as f:
        os.fchmod(f.fileno(), 0644)
        f.write(conffile)

# This function creates the bash_completion file.
def make_completion(target=None, source=None, env=None):
    completfile = ''
    for i in COMPLETFILES:
        completfile += i + '\n'
    with open(str(target[0]), 'w') as f:
        os.fchmod(f.fileno(), 0644)
        f.write(completfile)

# This function creates the control file from the template and info specified 
# above, and works out the final size of the package.
def make_control(target=None, source=None, env=None):
    installed_size = 0
    for i in DEBFILES:
        installed_size += os.stat(str(env.File(i[1])))[6]
    control_info = CONTROL_TEMPLATE % (
        DEBNAME, DEBSECTION, installed_size, DEBMAINT, DEBARCH, DEBVERSION,
        DEBDEPENDS, DEBDESC)
    with open(str(target[0]), 'w') as f:
        os.fchmod(f.fileno(), 0644)
        f.write(control_info)

# The following 2 functions create the md5sums file.
def md5sum(filename):
    md5 = hashlib.md5()
    with open(filename, 'rb') as f: 
        for chunk in iter(lambda: f.read(128*md5.block_size), b''): 
            md5.update(chunk)
    return md5.hexdigest()

def make_md5sums(target=None, source=None, env=None):
    md5sums = ''
    installed_size = 0
    for i in DEBFILES:
        src_filename = str(env.File(i[0]))
        dest_filename = str(env.File(i[1]))
        md5sums += "%s  ./%s\n" % (md5sum(dest_filename), src_filename)
    with open(str(target[0]), 'w') as f:
        os.fchmod(f.fileno(), 0644)
        f.write(md5sums)
    
# We can generate the files in the DEBIAN folder
env.Command(DEBCONFFILE, None, make_conffiles)
env.Command(DEBCOMPLETFILE, None, make_completion)
env.Command(DEBCONTROLFILE, None, make_control)
env.Command(DEBMD5FILE, None, make_md5sums)

# And we can generate the .deb file by calling dpkg-deb
env.Command(debpkg, [DEBCONFFILE, DEBCOMPLETFILE, DEBCONTROLFILE, DEBMD5FILE],
            "fakeroot dpkg-deb -b %s %s" % ("deb/%s" % DEBNAME, "$TARGET"))

